[{"D:\\course note\\fyp\\website\\新建文件夹\\FYP_Front_end\\src\\index.js":"1","D:\\course note\\fyp\\website\\新建文件夹\\FYP_Front_end\\src\\App.js":"2","D:\\course note\\fyp\\website\\新建文件夹\\FYP_Front_end\\src\\components\\Header.js":"3","D:\\course note\\fyp\\website\\新建文件夹\\FYP_Front_end\\src\\components\\Camera.js":"4","D:\\course note\\fyp\\website\\新建文件夹\\FYP_Front_end\\src\\components\\Advert.js":"5","D:\\course note\\fyp\\website\\新建文件夹\\FYP_Front_end\\src\\components\\slot.js":"6"},{"size":154,"mtime":1649851925054,"results":"7","hashOfConfig":"8"},{"size":1049,"mtime":1650201260986,"results":"9","hashOfConfig":"8"},{"size":234,"mtime":1650360159142,"results":"10","hashOfConfig":"8"},{"size":7805,"mtime":1650201593778,"results":"11","hashOfConfig":"8"},{"size":4284,"mtime":1650360089857,"results":"12","hashOfConfig":"8"},{"size":3473,"mtime":1650201485675,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},"lsolaw",{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27"},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},"D:\\course note\\fyp\\website\\新建文件夹\\FYP_Front_end\\src\\index.js",[],[],["35","36"],"D:\\course note\\fyp\\website\\新建文件夹\\FYP_Front_end\\src\\App.js",[],[],"D:\\course note\\fyp\\website\\新建文件夹\\FYP_Front_end\\src\\components\\Header.js",[],[],"D:\\course note\\fyp\\website\\新建文件夹\\FYP_Front_end\\src\\components\\Camera.js",["37","38","39","40"],[],"import React,{ useEffect, useState, Fragment} from \"react\"\r\nimport io from 'socket.io-client'\r\nimport \"./Camera.css\"\r\nimport Slot from './slot'\r\n\r\nexport default function Camera(props) {\r\n    const Logo = function(){\r\n        const logo = {\r\n            audi: require(\"../logo/Audi.png\"),\r\n            benz: require(\"../logo/Benz.png\"),\r\n            bmw: require(\"../logo/BMW.png\"),\r\n            honda: require(\"../logo/Honda.png\"),\r\n            hyundai: require(\"../logo/Hyundai.jpg\"),\r\n            infiniti: require(\"../logo/Infiniti.png\"),\r\n            kia: require(\"../logo/Kia.png\"),\r\n            landrover: require(\"../logo/LandRover.png\"),\r\n            lexus: require(\"../logo/Lexus.png\"),\r\n            mini: require(\"../logo/Mini.png\"),\r\n            mazda: require(\"../logo/Mazda.png\"),\r\n            mitsubishi: require(\"../logo/Mitsubishi.png\"),\r\n            nissan: require(\"../logo/Nissan.png\"),\r\n            porsche: require(\"../logo/Porsche.png\"),\r\n            subaru: require(\"../logo/Subaru.png\"),\r\n            suzuki: require(\"../logo/Suzuki.png\"),\r\n            tesla: require(\"../logo/Tesla.png\"),\r\n            toyota: require(\"../logo/Toyota.png\"),\r\n            volkswagen: require(\"../logo/Volkswagen.png\"),\r\n            volvo: require(\"../logo/Volvo.png\")\r\n        };\r\n        \r\n        const getImage = function(name){\r\n            let brand = name.toLowerCase();\r\n            if(brand in logo)\r\n                return logo[brand];\r\n            return require(\"../logo/Not_result.png\");\r\n        };\r\n        \r\n        return {getImage};\r\n    };\r\n\r\n    const Ad = function(){\r\n        const cloth = require(\"../ad/Clothing.jpg\")\r\n        const food = require(\"../ad/food.jpg\")\r\n        const shoes = require(\"../ad/shoes.jpg\")\r\n        const watch = require(\"../ad/watch.jpg\")\r\n        const ad = {\r\n            audi: cloth,\r\n            benz: watch,\r\n            bmw: watch,\r\n            honda: food,\r\n            hyundai: food,\r\n            infiniti: cloth,\r\n            kia: cloth,\r\n            landrover: shoes,\r\n            lexus: cloth,\r\n            mini: food,\r\n            mazda: shoes,\r\n            mitsubishi: cloth,\r\n            nissan: shoes,\r\n            porsche: watch,\r\n            subaru: food,\r\n            suzuki: cloth,\r\n            tesla: watch,\r\n            toyota: cloth,\r\n            volkswagen: cloth,\r\n            volvo: food\r\n        };\r\n        \r\n        const getImage = function(name){\r\n            let brand = name.toLowerCase();\r\n            if(brand in ad)\r\n                return ad[brand];\r\n            return require(\"../logo/Not_result.png\");\r\n        };\r\n        \r\n        return {getImage};\r\n    };\r\n    const socket_url = 'ws://localhost:4000/'\r\n    const flask_url = 'http://localhost:4000/'\r\n    let cameraID\r\n    (props.cameraID? cameraID = props.cameraID:cameraID = \"HKUST_001\")\r\n    const cameraUrl = flask_url + \"getCameraImage?cameraID=\"+cameraID\r\n    const [field, setField] = useState([])\r\n    const [cropNum, setCropNum] = useState(0)\r\n    const [mainField, setMainField] = useState()\r\n    const [lastUpdateTime, setLastUpdateTime] = useState(Date().toLocaleString())\r\n    const [ad, setAd] = useState(Ad().getImage(\"bmw\"))\r\n    const [adViewer, setAdViewer] = useState();\r\n\r\n    useEffect( () => {\r\n      const socket = io(flask_url);\r\n      socket.on('connect', function(){});\r\n      socket.on(\"CameraImageUpdated\", (arg) => { \r\n        //console.log(image);\r\n          if (arg === cameraID) //Message applies to all the fields of the same cameraID\r\n          {\r\n              setLastUpdateTime(Date().toLocaleString());\r\n              //console.log(image);\r\n          }\r\n      });\r\n  }, []);\r\n    useEffect(() => {\r\n        getImage();\r\n    },[])\r\n\r\n\r\n    const getImage = () =>{\r\n        fetch(cameraUrl,{\r\n            method: 'GET',\r\n            headers: { \"Content-Type\": \"application/json\" },\r\n            redirect: 'follow'\r\n            })\r\n                .then(res => res.json())\r\n                .then((json) => {\r\n                    console.log(json);\r\n                    setCropNum(json.number_of_slots);\r\n\r\n                    setMainField(<Slot \r\n                        cameraID={cameraID} \r\n                        name=\"Original Camera Input\" \r\n                        image={flask_url + json.main_image_path} \r\n                        url={flask_url} \r\n                        className=\"field_main\"\r\n                        />);\r\n\r\n                    const newfield = [];\r\n                    for(let i = 0; i < json.number_of_slots; i++){\r\n                        newfield.push({\r\n                            cameraID:cameraID,\r\n                            key:i+1,\r\n                            name: \"Camera-\" + cameraID + \"-slot-\" + (i+1),\r\n                            image:flask_url + json.sub_image_path[i],\r\n                            des:\"detecting\",\r\n                        });\r\n                    }\r\n                    if(json.number_of_slots > 0){\r\n                        setAdViewer(\"Camera-\" + cameraID + \"-slot-1\");\r\n                    }\r\n                    console.log(newfield);\r\n                    setField(newfield);\r\n                })\r\n    }\r\n    /*useEffect(() => {\r\n        if(mainImage != \"\")\r\n            CropImage()\r\n    }, [mainImage])\r\n    console.log(cropNum,mainImage)\r\n    const CropImage = () => {\r\n     \r\n      return new Promise(async (resolve, reject) => {\r\n        var formdata = new FormData();\r\n        let blob = await fetch(mainImage).then(r => r.blob());\r\n      formdata.append(\"image\",blob);\r\n  \r\n    fetch(\"http://localhost:5000/updateCameraImage?cameraID=001\", {\r\n        method: 'POST',\r\n        body: formdata,\r\n        redirect: 'follow'\r\n    })\r\n      .then(response => response.text())\r\n      .then(response => {\r\n            const json = JSON.parse(response)\r\n            console.log(json)\r\n            if (Array.isArray(json) && json.length > 0) {\r\n              setBrandID(json[0].class)\r\n            }\r\n            else{\r\n              setBrandID(\"\")\r\n            }\r\n      })\r\n      .catch(error => console.log('error', error));\r\n      })\r\n    }*/\r\n    //const [brand, setBrand] = useState(\"\")\r\n    \r\n    /*useEffect(() => {\r\n        if(cropNum != 0 && slotImage.length == cropNum)\r\n            {const newfield = []\r\n            for(let i = 0; i < cropNum; i++){\r\n                console.log(slotImage[i])\r\n                DetectImage(slotImage[i])\r\n                \r\n                newfield.push({\r\n                    key:i+1,\r\n                    name: \"Camera\" + cameraID + \"-slot-\" + (i+1),\r\n                    image: slotImage[i],\r\n                    des:brand,\r\n                    brand:Logo().getImage(brand)\r\n                })\r\n            }\r\n            setField(newfield)}\r\n    }, [cropNum, slotImage.length])*/\r\n\r\n    \r\n    const fieldElements = field?field.map(field => (\r\n        <Slot\r\n            cameraID={field.cameraID}\r\n            key={field.key}\r\n            name={field.name}\r\n            image={field.image}  \r\n            des={field.des}\r\n            logo={Logo()}\r\n            url= {flask_url}\r\n            class = \"field_slot\"\r\n            Ad = {Ad()}\r\n            SetAd = {setAd}\r\n            AdViewer = {adViewer}\r\n            SetAdViewer = {setAdViewer}\r\n        />\r\n    )):<br/>\r\n          //brand={field.brand} \r\n    return(\r\n        <div className=\"Camera\">\r\n            {mainField}\r\n            <br/>\r\n            {cropNum !== 0 && <div className=\"detection_container\">\r\n                {fieldElements}\r\n                <br/>\r\n            </div>\r\n            }\r\n            \r\n            <br/>\r\n            \r\n            \r\n            <Fragment>Last Updated: {lastUpdateTime}</Fragment>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\n/*<div>\r\n            <img src={ad} className=\"advertisement_sample\"></img>\r\n            </div>*/","D:\\course note\\fyp\\website\\新建文件夹\\FYP_Front_end\\src\\components\\Advert.js",["41","42","43","44"],[],"D:\\course note\\fyp\\website\\新建文件夹\\FYP_Front_end\\src\\components\\slot.js",["45","46","47"],[],"import React from \"react\"\r\nimport { useState } from \"react\";\r\nimport { useEffect } from \"react\";\r\nimport io from 'socket.io-client'\r\nimport \"./slot.css\"\r\nexport default function Slot(props){\r\n\r\n  const [brand, setBrand] = useState(\"\")\r\n  const [icon, setIcon] = useState(\"\")\r\n  const [image, setImage] = useState((props.image))\r\n  const [LP , setLP] = useState(\"\")\r\n  //Load Field Details upon initial rendering\r\n  useEffect(()=>{\r\n      UpdateField(props.image) //update Field Element using the image URL  \r\n  },[])\r\n\r\n  //Socket.IO listener for auto-updating\r\n  useEffect( () => {\r\n      //console.log('add camera ', props.cameraID);\r\n      //console.log('add socket ', props.url);\r\n      //console.log('add image ', props.image);\r\n      const socket = io(props.url);\r\n      socket.on('connect', function(){});\r\n      socket.on(\"CameraImageUpdated\", (arg) => { \r\n        //console.log(image);\r\n          if (arg === props.cameraID) //Message applies to all the fields of the same cameraID\r\n          {\r\n              UpdateField(props.image);\r\n              //console.log(image);\r\n          }\r\n      });\r\n  }, []);\r\n\r\n  const UpdateField = (image) => {\r\n    return new Promise(async (resolve, reject) => {\r\n      var formdata = new FormData();\r\n      let blob = await fetch(image).then(r => r.blob());\r\n    formdata.append(\"image\",blob);\r\n\r\n    //set the image of field\r\n    setImage(URL.createObjectURL(blob));\r\n    if(props.des)\r\n    {\r\n        fetch(props.url + \"detectCarBrand\", {\r\n        method: 'POST',\r\n        body: formdata,\r\n        redirect: 'follow'\r\n      })\r\n      .then(response => response.text())\r\n      .then(response => {\r\n            const json = JSON.parse(response)\r\n            console.log(json)\r\n            if (Array.isArray(json) && json.length > 0) {\r\n                //console.log(json[0].name)\r\n                setBrand(json[0].name);\r\n                setIcon(props.logo.getImage(json[0].name))\r\n                if(props.AdViewer === props.name){\r\n                  props.SetAd(props.Ad.getImage(json[0].name));\r\n                }\r\n            }\r\n            else{\r\n                setBrand(\"\");\r\n                setIcon(props.logo.getImage(\"\"));\r\n            }\r\n      })\r\n      .catch(error => console.log('error', error));  \r\n\r\n      fetch(props.url + \"detectLP\", {\r\n        method: 'POST',\r\n        body: formdata,\r\n        redirect: 'follow'\r\n      })\r\n      .then(response => response.text())\r\n      .then(response => {\r\n            const json = JSON.parse(response)\r\n            //console.log(json)\r\n            if(json.licencePlate){\r\n              setLP(json.licencePlate)\r\n            }else{\r\n              setLP(\"can not recognite\")\r\n            }\r\n\r\n      })\r\n      .catch(error => console.log('error', error));\r\n    }\r\n    })\r\n  }\r\n  \r\n  function changeAd(){\r\n    props.SetAd(props.Ad.getImage(brand));\r\n    props.SetAdViewer(props.name)\r\n  }\r\n\r\n  return(\r\n    <div>\r\n      <fieldset disabled className = {props.className} >\r\n          <legend>{props.name}</legend>\r\n          <img src = {image} className = \"field_image\" alt= {props.name+\"-image\"} onClick={changeAd}/>\r\n          {props.des && <div className = \"information\">\r\n              <div className = \"brand_detect\">\r\n                <img src = {icon} className = \"field_brand\"/>\r\n                <h4>{brand}</h4>\r\n              </div>\r\n              <h4 className=\"field_LP\">License Plate:{LP}</h4>\r\n          </div>\r\n          }\r\n      </fieldset>\r\n    </div>  \r\n  )\r\n}",{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","severity":1,"message":"53","line":78,"column":11,"nodeType":"54","messageId":"55","endLine":78,"endColumn":21},{"ruleId":"52","severity":1,"message":"56","line":87,"column":12,"nodeType":"54","messageId":"55","endLine":87,"endColumn":14},{"ruleId":"57","severity":1,"message":"58","line":101,"column":6,"nodeType":"59","endLine":101,"endColumn":8,"suggestions":"60"},{"ruleId":"57","severity":1,"message":"61","line":104,"column":7,"nodeType":"59","endLine":104,"endColumn":9,"suggestions":"62"},{"ruleId":"52","severity":1,"message":"63","line":1,"column":37,"nodeType":"54","messageId":"55","endLine":1,"endColumn":45},{"ruleId":"57","severity":1,"message":"64","line":55,"column":7,"nodeType":"59","endLine":55,"endColumn":9,"suggestions":"65"},{"ruleId":"57","severity":1,"message":"66","line":91,"column":8,"nodeType":"59","endLine":91,"endColumn":10,"suggestions":"67"},{"ruleId":"68","severity":1,"message":"69","line":127,"column":13,"nodeType":"70","endLine":127,"endColumn":59},{"ruleId":"57","severity":1,"message":"71","line":15,"column":5,"nodeType":"59","endLine":15,"endColumn":7,"suggestions":"72"},{"ruleId":"57","severity":1,"message":"73","line":32,"column":6,"nodeType":"59","endLine":32,"endColumn":8,"suggestions":"74"},{"ruleId":"68","severity":1,"message":"69","line":101,"column":17,"nodeType":"70","endLine":101,"endColumn":62},"no-native-reassign",["75"],"no-negated-in-lhs",["76"],"no-unused-vars","'socket_url' is assigned a value but never used.","Identifier","unusedVar","'ad' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'cameraID'. Either include it or remove the dependency array.","ArrayExpression",["77"],"React Hook useEffect has a missing dependency: 'getImage'. Either include it or remove the dependency array.",["78"],"'Fragment' is defined but never used.","React Hook useEffect has a missing dependency: 'getSlot'. Either include it or remove the dependency array.",["79"],"React Hook useEffect has missing dependencies: 'UpdateImage', 'adViewer', 'cameraID', and 'cropNum'. Either include them or remove the dependency array.",["80"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","React Hook useEffect has missing dependencies: 'UpdateField' and 'props.image'. Either include them or remove the dependency array.",["81"],"React Hook useEffect has missing dependencies: 'UpdateField', 'props.cameraID', 'props.image', and 'props.url'. Either include them or remove the dependency array.",["82"],"no-global-assign","no-unsafe-negation",{"desc":"83","fix":"84"},{"desc":"85","fix":"86"},{"desc":"87","fix":"88"},{"desc":"89","fix":"90"},{"desc":"91","fix":"92"},{"desc":"93","fix":"94"},"Update the dependencies array to be: [cameraID]",{"range":"95","text":"96"},"Update the dependencies array to be: [getImage]",{"range":"97","text":"98"},"Update the dependencies array to be: [getSlot]",{"range":"99","text":"100"},"Update the dependencies array to be: [UpdateImage, adViewer, cameraID, cropNum]",{"range":"101","text":"102"},"Update the dependencies array to be: [UpdateField, props.image]",{"range":"103","text":"104"},"Update the dependencies array to be: [UpdateField, props.cameraID, props.image, props.url]",{"range":"105","text":"106"},[3659,3661],"[cameraID]",[3715,3717],"[getImage]",[1673,1675],"[getSlot]",[3049,3051],"[UpdateImage, adViewer, cameraID, cropNum]",[513,515],"[UpdateField, props.image]",[1112,1114],"[UpdateField, props.cameraID, props.image, props.url]"]
{"ast":null,"code":"var _jsxFileName = \"/Users/windsor/FYP_Front_end/src/components/Camera.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport Field from './Field';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Camera(props) {\n  _s();\n\n  const Logo = function () {\n    const logo = {\n      audi: require(\"../logo/Audi.png\"),\n      benz: require(\"../logo/Benz.png\"),\n      bmw: require(\"../logo/BMW.png\"),\n      honda: require(\"../logo/Honda.png\"),\n      hyundai: require(\"../logo/Hyundai.jpg\"),\n      infiniti: require(\"../logo/Infiniti.png\"),\n      kia: require(\"../logo/Kia.png\"),\n      landRover: require(\"../logo/LandRover.png\"),\n      lexus: require(\"../logo/Lexus.png\"),\n      mini: require(\"../logo/Mini.png\"),\n      mazda: require(\"../logo/Mazda.png\"),\n      mitsubishi: require(\"../logo/Mitsubishi.png\"),\n      nissan: require(\"../logo/Nissan.png\"),\n      porsche: require(\"../logo/Porsche.png\"),\n      subaru: require(\"../logo/Subaru.png\"),\n      suzuki: require(\"../logo/Suzuki.png\"),\n      tesla: require(\"../logo/Tesla.png\"),\n      toyota: require(\"../logo/Toyota.png\"),\n      volkswagen: require(\"../logo/Volkswagen.png\"),\n      volvo: require(\"../logo/Volvo.png\")\n    };\n\n    const getImage = function (name) {\n      let brand = name.toLowerCase();\n      if (brand in logo) return logo[brand];\n      return require(\"../logo/Not_result.png\");\n    };\n\n    return {\n      getImage\n    };\n  };\n\n  const cameraID = \"001\";\n  const cameraUri = 'http://localhost:5000/getCameraImage?cameraID=' + cameraID;\n  const [field, setField] = useState([]);\n  const [mainImage, setMainImage] = useState(\"\");\n  const [cropNum, setCropNum] = useState(0);\n  useEffect(() => {\n    getImage();\n  }, []);\n\n  const getImage = () => {\n    fetch(cameraUri, {\n      method: 'GET',\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      redirect: 'follow'\n    }).then(res => res.json()).then(json => {\n      console.log(json);\n      setCropNum(json.number_of_slots);\n      setMainImage(\"http://localhost:5000/\" + json.main_image_path);\n      const newfield = [];\n\n      for (let i = 0; i < json.number_of_slots; i++) {\n        newfield.push({\n          key: i + 1,\n          name: \"Camera\" + cameraID + \"-slot-\" + (i + 1),\n          image: \"http://localhost:5000/\" + json.sub_image_path[i],\n          des: \"detecting\"\n        });\n      }\n\n      console.log(newfield);\n      setField(newfield);\n    });\n  };\n  /*useEffect(() => {\n      if(mainImage != \"\")\n          CropImage()\n  }, [mainImage])\n  console.log(cropNum,mainImage)\n  const CropImage = () => {\n   \n    return new Promise(async (resolve, reject) => {\n      var formdata = new FormData();\n      let blob = await fetch(mainImage).then(r => r.blob());\n    formdata.append(\"image\",blob);\n     fetch(\"http://localhost:5000/updateCameraImage?cameraID=001\", {\n      method: 'POST',\n      body: formdata,\n      redirect: 'follow'\n  })\n    .then(response => response.text())\n    .then(response => {\n          const json = JSON.parse(response)\n          console.log(json)\n          if (Array.isArray(json) && json.length > 0) {\n            setBrandID(json[0].class)\n          }\n          else{\n            setBrandID(\"\")\n          }\n    })\n    .catch(error => console.log('error', error));\n    })\n  }*/\n  //const [brand, setBrand] = useState(\"\")\n\n  /*useEffect(() => {\n      if(cropNum != 0 && slotImage.length == cropNum)\n          {const newfield = []\n          for(let i = 0; i < cropNum; i++){\n              console.log(slotImage[i])\n              DetectImage(slotImage[i])\n              \n              newfield.push({\n                  key:i+1,\n                  name: \"Camera\" + cameraID + \"-slot-\" + (i+1),\n                  image: slotImage[i],\n                  des:brand,\n                  brand:Logo().getImage(brand)\n              })\n          }\n          setField(newfield)}\n  }, [cropNum, slotImage.length])*/\n\n\n  const fieldElements = field ? field.map(field => /*#__PURE__*/_jsxDEV(Field, {\n    name: field.name,\n    image: field.image,\n    des: field.des,\n    logo: Logo()\n  }, field.key, false, {\n    fileName: _jsxFileName,\n    lineNumber: 128,\n    columnNumber: 9\n  }, this)) : /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 135,\n    columnNumber: 8\n  }, this); //brand={field.brand} \n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Field, {\n      image: mainImage,\n      name: \"input\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 9\n    }, this), cropNum !== 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"detection_container\",\n      children: fieldElements\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 31\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 138,\n    columnNumber: 9\n  }, this);\n}\n/**/\n\n_s(Camera, \"B/RoErPOnht+N4g4o6RmjjL8nbg=\");\n\n_c = Camera;\n\nvar _c;\n\n$RefreshReg$(_c, \"Camera\");","map":{"version":3,"sources":["/Users/windsor/FYP_Front_end/src/components/Camera.js"],"names":["React","useEffect","useState","Field","Camera","props","Logo","logo","audi","require","benz","bmw","honda","hyundai","infiniti","kia","landRover","lexus","mini","mazda","mitsubishi","nissan","porsche","subaru","suzuki","tesla","toyota","volkswagen","volvo","getImage","name","brand","toLowerCase","cameraID","cameraUri","field","setField","mainImage","setMainImage","cropNum","setCropNum","fetch","method","headers","redirect","then","res","json","console","log","number_of_slots","main_image_path","newfield","i","push","key","image","sub_image_path","des","fieldElements","map"],"mappings":"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","sourcesContent":["import React,{ useEffect, useState } from \"react\"\nimport Field from './Field'\n\nexport default function Camera(props) {\n    const Logo = function(){\n        const logo = {\n            audi: require(\"../logo/Audi.png\"),\n            benz: require(\"../logo/Benz.png\"),\n            bmw: require(\"../logo/BMW.png\"),\n            honda: require(\"../logo/Honda.png\"),\n            hyundai: require(\"../logo/Hyundai.jpg\"),\n            infiniti: require(\"../logo/Infiniti.png\"),\n            kia: require(\"../logo/Kia.png\"),\n            landRover: require(\"../logo/LandRover.png\"),\n            lexus: require(\"../logo/Lexus.png\"),\n            mini: require(\"../logo/Mini.png\"),\n            mazda: require(\"../logo/Mazda.png\"),\n            mitsubishi: require(\"../logo/Mitsubishi.png\"),\n            nissan: require(\"../logo/Nissan.png\"),\n            porsche: require(\"../logo/Porsche.png\"),\n            subaru: require(\"../logo/Subaru.png\"),\n            suzuki: require(\"../logo/Suzuki.png\"),\n            tesla: require(\"../logo/Tesla.png\"),\n            toyota: require(\"../logo/Toyota.png\"),\n            volkswagen: require(\"../logo/Volkswagen.png\"),\n            volvo: require(\"../logo/Volvo.png\")\n        };\n        \n        const getImage = function(name){\n            let brand = name.toLowerCase();\n            if(brand in logo)\n                return logo[brand];\n            return require(\"../logo/Not_result.png\");\n        };\n        \n        return {getImage};\n    };\n\n    \n    const cameraID = \"001\"\n    const cameraUri = 'http://localhost:5000/getCameraImage?cameraID='+cameraID\n    const [field, setField] = useState([])\n    const [mainImage, setMainImage] = useState(\"\")\n    const [cropNum, setCropNum] = useState(0)\n    useEffect(() => {\n        getImage();\n    },[])\n\n    const getImage = () =>{\n        fetch(cameraUri,{\n            method: 'GET',\n            headers: { \"Content-Type\": \"application/json\" },\n            redirect: 'follow'\n            })\n                .then(res => res.json())\n                .then((json) => {\n                    console.log(json)\n                    setCropNum(json.number_of_slots);\n\n                    setMainImage(\"http://localhost:5000/\"+json.main_image_path)\n                    \n                    const newfield = []\n                    for(let i = 0; i < json.number_of_slots; i++){\n                        newfield.push({\n                            key:i+1,\n                            name: \"Camera\" + cameraID + \"-slot-\" + (i+1),\n                            image:\"http://localhost:5000/\"+json.sub_image_path[i],\n                            des:\"detecting\",\n                        });\n                    }\n                    console.log(newfield)\n                    setField(newfield)\n                })\n    }\n    /*useEffect(() => {\n        if(mainImage != \"\")\n            CropImage()\n    }, [mainImage])\n    console.log(cropNum,mainImage)\n    const CropImage = () => {\n     \n      return new Promise(async (resolve, reject) => {\n        var formdata = new FormData();\n        let blob = await fetch(mainImage).then(r => r.blob());\n      formdata.append(\"image\",blob);\n  \n    fetch(\"http://localhost:5000/updateCameraImage?cameraID=001\", {\n        method: 'POST',\n        body: formdata,\n        redirect: 'follow'\n    })\n      .then(response => response.text())\n      .then(response => {\n            const json = JSON.parse(response)\n            console.log(json)\n            if (Array.isArray(json) && json.length > 0) {\n              setBrandID(json[0].class)\n            }\n            else{\n              setBrandID(\"\")\n            }\n      })\n      .catch(error => console.log('error', error));\n      })\n    }*/\n    //const [brand, setBrand] = useState(\"\")\n    \n    /*useEffect(() => {\n        if(cropNum != 0 && slotImage.length == cropNum)\n            {const newfield = []\n            for(let i = 0; i < cropNum; i++){\n                console.log(slotImage[i])\n                DetectImage(slotImage[i])\n                \n                newfield.push({\n                    key:i+1,\n                    name: \"Camera\" + cameraID + \"-slot-\" + (i+1),\n                    image: slotImage[i],\n                    des:brand,\n                    brand:Logo().getImage(brand)\n                })\n            }\n            setField(newfield)}\n    }, [cropNum, slotImage.length])*/\n\n  \n    const fieldElements = field?field.map(field => (\n        <Field\n            key={field.key}\n            name={field.name}\n            image={field.image}  \n            des={field.des}\n            logo={Logo()}\n        />\n    )):<br/>\n          //brand={field.brand} \n    return(\n        <div>\n        <Field image={mainImage} name=\"input\"/>\n            {cropNum !== 0 && <div className=\"detection_container\">\n                {fieldElements}\n            </div>}\n        </div>\n    )\n}\n\n/**/"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _slicedToArray from\"/Users/windsor/FYP_Front_end/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useEffect,useState}from\"react\";import Field from'./Field';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export default function Camera(props){var Logo=function Logo(){var logo={audi:require(\"../logo/Audi.png\"),benz:require(\"../logo/Benz.png\"),bmw:require(\"../logo/BMW.png\"),honda:require(\"../logo/Honda.png\"),hyundai:require(\"../logo/Hyundai.jpg\"),infiniti:require(\"../logo/Infiniti.png\"),kia:require(\"../logo/Kia.png\"),landRover:require(\"../logo/LandRover.png\"),lexus:require(\"../logo/Lexus.png\"),mini:require(\"../logo/Mini.png\"),mazda:require(\"../logo/Mazda.png\"),mitsubishi:require(\"../logo/Mitsubishi.png\"),nissan:require(\"../logo/Nissan.png\"),porsche:require(\"../logo/Porsche.png\"),subaru:require(\"../logo/Subaru.png\"),suzuki:require(\"../logo/Suzuki.png\"),tesla:require(\"../logo/Tesla.png\"),toyota:require(\"../logo/Toyota.png\"),volkswagen:require(\"../logo/Volkswagen.png\"),volvo:require(\"../logo/Volvo.png\")};var getImage=function getImage(name){var brand=name.toLowerCase();if(brand in logo)return logo[brand];return require(\"../logo/Not_result.png\");};return{getImage:getImage};};var url='http://localhost:6000/';var cameraID=\"001\";var cameraUrl=url+\"getCameraImage?cameraID=\"+cameraID;var _useState=useState([]),_useState2=_slicedToArray(_useState,2),field=_useState2[0],setField=_useState2[1];var _useState3=useState(\"\"),_useState4=_slicedToArray(_useState3,2),mainImage=_useState4[0],setMainImage=_useState4[1];var _useState5=useState(0),_useState6=_slicedToArray(_useState5,2),cropNum=_useState6[0],setCropNum=_useState6[1];useEffect(function(){getImage();},[]);var getImage=function getImage(){fetch(cameraUrl,{method:'GET',headers:{\"Content-Type\":\"application/json\"},redirect:'follow'}).then(function(res){return res.json();}).then(function(json){console.log(json);setCropNum(json.number_of_slots);setMainImage(url+json.main_image_path);var newfield=[];for(var i=0;i<json.number_of_slots;i++){newfield.push({key:i+1,name:\"Camera\"+cameraID+\"-slot-\"+(i+1),image:url+json.sub_image_path[i],des:\"detecting\"});}console.log(newfield);setField(newfield);});};/*useEffect(() => {\n        if(mainImage != \"\")\n            CropImage()\n    }, [mainImage])\n    console.log(cropNum,mainImage)\n    const CropImage = () => {\n     \n      return new Promise(async (resolve, reject) => {\n        var formdata = new FormData();\n        let blob = await fetch(mainImage).then(r => r.blob());\n      formdata.append(\"image\",blob);\n  \n    fetch(\"http://localhost:5000/updateCameraImage?cameraID=001\", {\n        method: 'POST',\n        body: formdata,\n        redirect: 'follow'\n    })\n      .then(response => response.text())\n      .then(response => {\n            const json = JSON.parse(response)\n            console.log(json)\n            if (Array.isArray(json) && json.length > 0) {\n              setBrandID(json[0].class)\n            }\n            else{\n              setBrandID(\"\")\n            }\n      })\n      .catch(error => console.log('error', error));\n      })\n    }*/ //const [brand, setBrand] = useState(\"\")\n/*useEffect(() => {\n        if(cropNum != 0 && slotImage.length == cropNum)\n            {const newfield = []\n            for(let i = 0; i < cropNum; i++){\n                console.log(slotImage[i])\n                DetectImage(slotImage[i])\n                \n                newfield.push({\n                    key:i+1,\n                    name: \"Camera\" + cameraID + \"-slot-\" + (i+1),\n                    image: slotImage[i],\n                    des:brand,\n                    brand:Logo().getImage(brand)\n                })\n            }\n            setField(newfield)}\n    }, [cropNum, slotImage.length])*/var fieldElements=field?field.map(function(field){return/*#__PURE__*/_jsx(Field,{name:field.name,image:field.image,des:field.des,logo:Logo(),url:url},field.key);}):/*#__PURE__*/_jsx(\"br\",{});//brand={field.brand} \nreturn/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(Field,{image:mainImage,name:\"input\"}),cropNum!==0&&/*#__PURE__*/_jsx(\"div\",{className:\"detection_container\",children:fieldElements})]});}/**/","map":{"version":3,"sources":["/Users/windsor/FYP_Front_end/src/components/Camera.js"],"names":["React","useEffect","useState","Field","Camera","props","Logo","logo","audi","require","benz","bmw","honda","hyundai","infiniti","kia","landRover","lexus","mini","mazda","mitsubishi","nissan","porsche","subaru","suzuki","tesla","toyota","volkswagen","volvo","getImage","name","brand","toLowerCase","url","cameraID","cameraUrl","field","setField","mainImage","setMainImage","cropNum","setCropNum","fetch","method","headers","redirect","then","res","json","console","log","number_of_slots","main_image_path","newfield","i","push","key","image","sub_image_path","des","fieldElements","map"],"mappings":"kHAAA,MAAOA,CAAAA,KAAP,EAAeC,SAAf,CAA0BC,QAA1B,KAA0C,OAA1C,CACA,MAAOC,CAAAA,KAAP,KAAkB,SAAlB,C,wFAEA,cAAe,SAASC,CAAAA,MAAT,CAAgBC,KAAhB,CAAuB,CAClC,GAAMC,CAAAA,IAAI,CAAG,QAAPA,CAAAA,IAAO,EAAU,CACnB,GAAMC,CAAAA,IAAI,CAAG,CACTC,IAAI,CAAEC,OAAO,CAAC,kBAAD,CADJ,CAETC,IAAI,CAAED,OAAO,CAAC,kBAAD,CAFJ,CAGTE,GAAG,CAAEF,OAAO,CAAC,iBAAD,CAHH,CAITG,KAAK,CAAEH,OAAO,CAAC,mBAAD,CAJL,CAKTI,OAAO,CAAEJ,OAAO,CAAC,qBAAD,CALP,CAMTK,QAAQ,CAAEL,OAAO,CAAC,sBAAD,CANR,CAOTM,GAAG,CAAEN,OAAO,CAAC,iBAAD,CAPH,CAQTO,SAAS,CAAEP,OAAO,CAAC,uBAAD,CART,CASTQ,KAAK,CAAER,OAAO,CAAC,mBAAD,CATL,CAUTS,IAAI,CAAET,OAAO,CAAC,kBAAD,CAVJ,CAWTU,KAAK,CAAEV,OAAO,CAAC,mBAAD,CAXL,CAYTW,UAAU,CAAEX,OAAO,CAAC,wBAAD,CAZV,CAaTY,MAAM,CAAEZ,OAAO,CAAC,oBAAD,CAbN,CAcTa,OAAO,CAAEb,OAAO,CAAC,qBAAD,CAdP,CAeTc,MAAM,CAAEd,OAAO,CAAC,oBAAD,CAfN,CAgBTe,MAAM,CAAEf,OAAO,CAAC,oBAAD,CAhBN,CAiBTgB,KAAK,CAAEhB,OAAO,CAAC,mBAAD,CAjBL,CAkBTiB,MAAM,CAAEjB,OAAO,CAAC,oBAAD,CAlBN,CAmBTkB,UAAU,CAAElB,OAAO,CAAC,wBAAD,CAnBV,CAoBTmB,KAAK,CAAEnB,OAAO,CAAC,mBAAD,CApBL,CAAb,CAuBA,GAAMoB,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAASC,IAAT,CAAc,CAC3B,GAAIC,CAAAA,KAAK,CAAGD,IAAI,CAACE,WAAL,EAAZ,CACA,GAAGD,KAAK,GAAIxB,CAAAA,IAAZ,CACI,MAAOA,CAAAA,IAAI,CAACwB,KAAD,CAAX,CACJ,MAAOtB,CAAAA,OAAO,CAAC,wBAAD,CAAd,CACH,CALD,CAOA,MAAO,CAACoB,QAAQ,CAARA,QAAD,CAAP,CACH,CAhCD,CAkCA,GAAMI,CAAAA,GAAG,CAAE,wBAAX,CACA,GAAMC,CAAAA,QAAQ,CAAG,KAAjB,CACA,GAAMC,CAAAA,SAAS,CAAGF,GAAG,CAAG,0BAAN,CAAiCC,QAAnD,CACA,cAA0BhC,QAAQ,CAAC,EAAD,CAAlC,wCAAOkC,KAAP,eAAcC,QAAd,eACA,eAAkCnC,QAAQ,CAAC,EAAD,CAA1C,yCAAOoC,SAAP,eAAkBC,YAAlB,eACA,eAA8BrC,QAAQ,CAAC,CAAD,CAAtC,yCAAOsC,OAAP,eAAgBC,UAAhB,eACAxC,SAAS,CAAC,UAAM,CACZ4B,QAAQ,GACX,CAFQ,CAEP,EAFO,CAAT,CAIA,GAAMA,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,EAAK,CAClBa,KAAK,CAACP,SAAD,CAAW,CACZQ,MAAM,CAAE,KADI,CAEZC,OAAO,CAAE,CAAE,eAAgB,kBAAlB,CAFG,CAGZC,QAAQ,CAAE,QAHE,CAAX,CAAL,CAKSC,IALT,CAKc,SAAAC,GAAG,QAAIA,CAAAA,GAAG,CAACC,IAAJ,EAAJ,EALjB,EAMSF,IANT,CAMc,SAACE,IAAD,CAAU,CACZC,OAAO,CAACC,GAAR,CAAYF,IAAZ,EACAP,UAAU,CAACO,IAAI,CAACG,eAAN,CAAV,CAEAZ,YAAY,CAACN,GAAG,CAACe,IAAI,CAACI,eAAV,CAAZ,CAEA,GAAMC,CAAAA,QAAQ,CAAG,EAAjB,CACA,IAAI,GAAIC,CAAAA,CAAC,CAAG,CAAZ,CAAeA,CAAC,CAAGN,IAAI,CAACG,eAAxB,CAAyCG,CAAC,EAA1C,CAA6C,CACzCD,QAAQ,CAACE,IAAT,CAAc,CACVC,GAAG,CAACF,CAAC,CAAC,CADI,CAEVxB,IAAI,CAAE,SAAWI,QAAX,CAAsB,QAAtB,EAAkCoB,CAAC,CAAC,CAApC,CAFI,CAGVG,KAAK,CAACxB,GAAG,CAACe,IAAI,CAACU,cAAL,CAAoBJ,CAApB,CAHA,CAIVK,GAAG,CAAC,WAJM,CAAd,EAMH,CACDV,OAAO,CAACC,GAAR,CAAYG,QAAZ,EACAhB,QAAQ,CAACgB,QAAD,CAAR,CACH,CAvBT,EAwBH,CAzBD,CA0BA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OArGsC,CAsGlC;AAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAGI,GAAMO,CAAAA,aAAa,CAAGxB,KAAK,CAACA,KAAK,CAACyB,GAAN,CAAU,SAAAzB,KAAK,qBACvC,KAAC,KAAD,EAEI,IAAI,CAAEA,KAAK,CAACN,IAFhB,CAGI,KAAK,CAAEM,KAAK,CAACqB,KAHjB,CAII,GAAG,CAAErB,KAAK,CAACuB,GAJf,CAKI,IAAI,CAAErD,IAAI,EALd,CAMI,GAAG,CAAG2B,GANV,EACSG,KAAK,CAACoB,GADf,CADuC,EAAf,CAAD,cASxB,aATH,CAUM;AACN,mBACI,oCACA,KAAC,KAAD,EAAO,KAAK,CAAElB,SAAd,CAAyB,IAAI,CAAC,OAA9B,EADA,CAEKE,OAAO,GAAK,CAAZ,eAAiB,YAAK,SAAS,CAAC,qBAAf,UACboB,aADa,EAFtB,GADJ,CAQH,CAED","sourcesContent":["import React,{ useEffect, useState } from \"react\"\nimport Field from './Field'\n\nexport default function Camera(props) {\n    const Logo = function(){\n        const logo = {\n            audi: require(\"../logo/Audi.png\"),\n            benz: require(\"../logo/Benz.png\"),\n            bmw: require(\"../logo/BMW.png\"),\n            honda: require(\"../logo/Honda.png\"),\n            hyundai: require(\"../logo/Hyundai.jpg\"),\n            infiniti: require(\"../logo/Infiniti.png\"),\n            kia: require(\"../logo/Kia.png\"),\n            landRover: require(\"../logo/LandRover.png\"),\n            lexus: require(\"../logo/Lexus.png\"),\n            mini: require(\"../logo/Mini.png\"),\n            mazda: require(\"../logo/Mazda.png\"),\n            mitsubishi: require(\"../logo/Mitsubishi.png\"),\n            nissan: require(\"../logo/Nissan.png\"),\n            porsche: require(\"../logo/Porsche.png\"),\n            subaru: require(\"../logo/Subaru.png\"),\n            suzuki: require(\"../logo/Suzuki.png\"),\n            tesla: require(\"../logo/Tesla.png\"),\n            toyota: require(\"../logo/Toyota.png\"),\n            volkswagen: require(\"../logo/Volkswagen.png\"),\n            volvo: require(\"../logo/Volvo.png\")\n        };\n        \n        const getImage = function(name){\n            let brand = name.toLowerCase();\n            if(brand in logo)\n                return logo[brand];\n            return require(\"../logo/Not_result.png\");\n        };\n        \n        return {getImage};\n    };\n\n    const url ='http://localhost:6000/'\n    const cameraID = \"001\"\n    const cameraUrl = url + \"getCameraImage?cameraID=\"+cameraID\n    const [field, setField] = useState([])\n    const [mainImage, setMainImage] = useState(\"\")\n    const [cropNum, setCropNum] = useState(0)\n    useEffect(() => {\n        getImage();\n    },[])\n\n    const getImage = () =>{\n        fetch(cameraUrl,{\n            method: 'GET',\n            headers: { \"Content-Type\": \"application/json\" },\n            redirect: 'follow'\n            })\n                .then(res => res.json())\n                .then((json) => {\n                    console.log(json)\n                    setCropNum(json.number_of_slots);\n\n                    setMainImage(url+json.main_image_path)\n                    \n                    const newfield = []\n                    for(let i = 0; i < json.number_of_slots; i++){\n                        newfield.push({\n                            key:i+1,\n                            name: \"Camera\" + cameraID + \"-slot-\" + (i+1),\n                            image:url+json.sub_image_path[i],\n                            des:\"detecting\",\n                        });\n                    }\n                    console.log(newfield)\n                    setField(newfield)\n                })\n    }\n    /*useEffect(() => {\n        if(mainImage != \"\")\n            CropImage()\n    }, [mainImage])\n    console.log(cropNum,mainImage)\n    const CropImage = () => {\n     \n      return new Promise(async (resolve, reject) => {\n        var formdata = new FormData();\n        let blob = await fetch(mainImage).then(r => r.blob());\n      formdata.append(\"image\",blob);\n  \n    fetch(\"http://localhost:5000/updateCameraImage?cameraID=001\", {\n        method: 'POST',\n        body: formdata,\n        redirect: 'follow'\n    })\n      .then(response => response.text())\n      .then(response => {\n            const json = JSON.parse(response)\n            console.log(json)\n            if (Array.isArray(json) && json.length > 0) {\n              setBrandID(json[0].class)\n            }\n            else{\n              setBrandID(\"\")\n            }\n      })\n      .catch(error => console.log('error', error));\n      })\n    }*/\n    //const [brand, setBrand] = useState(\"\")\n    \n    /*useEffect(() => {\n        if(cropNum != 0 && slotImage.length == cropNum)\n            {const newfield = []\n            for(let i = 0; i < cropNum; i++){\n                console.log(slotImage[i])\n                DetectImage(slotImage[i])\n                \n                newfield.push({\n                    key:i+1,\n                    name: \"Camera\" + cameraID + \"-slot-\" + (i+1),\n                    image: slotImage[i],\n                    des:brand,\n                    brand:Logo().getImage(brand)\n                })\n            }\n            setField(newfield)}\n    }, [cropNum, slotImage.length])*/\n\n  \n    const fieldElements = field?field.map(field => (\n        <Field\n            key={field.key}\n            name={field.name}\n            image={field.image}  \n            des={field.des}\n            logo={Logo()}\n            url= {url}\n        />\n    )):<br/>\n          //brand={field.brand} \n    return(\n        <div>\n        <Field image={mainImage} name=\"input\"/>\n            {cropNum !== 0 && <div className=\"detection_container\">\n                {fieldElements}\n            </div>}\n        </div>\n    )\n}\n\n/**/"]},"metadata":{},"sourceType":"module"}